{"fileName":"pattern","collection":{"abstract-factory-pattern":{"type":"wiki","title":"추상 팩토리 패턴 (Abstract Factory Pattern)","summary":"서로 관련성이 있는 다양한 객체를 생성하기 위한 인터페이스를 제공한다","parent":"design-pattern","url":"/wiki/abstract-factory-pattern","updated":"2019-10-24 12:19:51 +0900","children":[]},"adapter-pattern":{"type":"wiki","title":"어댑터 패턴 (Adapter Pattern)","summary":"서로 일치하지 않는 인터페이스를 가진 클래스를 함께 동작시킨다","parent":"design-pattern","url":"/wiki/adapter-pattern","updated":"2019-10-29 15:20:41 +0900","children":[]},"builder-pattern":{"type":"wiki","title":"빌더 패턴(Builder Pattern)","summary":"객체의 생성 방법과 표현 방법을 분리한다","parent":"design-pattern","url":"/wiki/builder-pattern","updated":"2020-06-18 22:06:38 +0900","children":[]},"decorator-pattern":{"type":"wiki","title":"데코레이터 패턴 (Decorator Pattern)","summary":"객체에 동적으로 새로운 책임을 추가한다","parent":"design-pattern","url":"/wiki/decorator-pattern","updated":"2019-10-05 23:21:44 +0900","children":[]},"defensive-copy.md":{"type":"wiki","title":"방어적 복사 (defensive copy)","summary":"검사시점/사용시점 취약점을 방어하자","parent":"index","url":"/wiki/defensive-copy.md","updated":"2020-01-15 22:19:50 +0900","children":[]},"design-pattern":{"type":"wiki","title":"디자인 패턴","parent":"index","url":"/wiki/design-pattern","updated":"2019-11-20 21:30:40 +0900","children":["abstract-factory-pattern","adapter-pattern","builder-pattern","command-pattern","decorator-pattern","design-pattern-quotes","factory-method-pattern","null-object-pattern","observer-pattern","static-factory-method-pattern","strategy-pattern","template-method-pattern"]},"design-pattern-quotes":{"type":"wiki","title":"디자인 패턴 토막글 모음","summary":"","parent":"design-pattern","url":"/wiki/design-pattern-quotes","updated":"2019-11-21 09:25:58 +0900","children":[]},"factory-method-pattern":{"type":"wiki","title":"팩토리 메소드 패턴 (Factory Method Pattern)","summary":"객체를 생성하기 위한 인터페이스를 정의하고, 인스턴스 생성은 서브클래스가 결정하게 한다","parent":"design-pattern","url":"/wiki/factory-method-pattern","updated":"2019-11-21 09:37:23 +0900","children":[]},"GoF-Design-Pattern":{"type":"wiki","title":"(책) GoF의 디자인 패턴","summary":"Design Patterns Elements of Reusable Object-Oriented Software","parent":"book","url":"/wiki/GoF-Design-Pattern","updated":"2018-02-12 08:51:18 +0900","children":[]},"null-object-pattern":{"type":"wiki","title":"널 오브젝트 패턴 (Null Object Pattern)","summary":"인터페이스는 구현하지만 아무 일도 하지 않는 객체","parent":"design-pattern","url":"/wiki/null-object-pattern","updated":"2020-02-06 23:57:32 +0900","children":[]},"observer-pattern":{"type":"wiki","title":"옵저버 패턴(Observer Pattern)","summary":"상태 변화를 감시자에게 통지한다","parent":"design-pattern","url":"/wiki/observer-pattern","updated":"2019-10-05 10:40:00 +0900","children":[]},"static-factory-method-pattern":{"type":"wiki","title":"정적 팩토리 메서드(static factory method)","summary":"static 메서드로 객체 생성을 캡슐화한다","parent":"design-pattern","url":"/wiki/static-factory-method-pattern","updated":"2020-03-21 16:13:54 +0900","children":[]},"strangler-pattern":{"type":"wiki","title":"교살자 패턴, 스트랭글러 패턴 (strangler pattern)","summary":"레거시 시스템을 점진적으로 교체하여 레거시 시스템을 단계적으로 페이드아웃한다","parent":"index","url":"/wiki/strangler-pattern","updated":"2020-07-16 23:07:57 +0900","children":[]},"strategy-pattern":{"type":"wiki","title":"전략 패턴(strategy pattern)","summary":"동일 계열의 알고리즘을 정의하고 상호교환이 가능하게 한다","parent":"design-pattern","url":"/wiki/strategy-pattern","updated":"2019-09-22 21:23:31 +0900","children":[]},"template-method-pattern":{"type":"wiki","title":"템플릿 메소드 패턴 (Template Method Pattern)","summary":"알고리즘의 일부 단계를 서브클래스에서 정의한다","parent":"design-pattern","url":"/wiki/template-method-pattern","updated":"2019-11-21 09:28:58 +0900","children":[]}}}